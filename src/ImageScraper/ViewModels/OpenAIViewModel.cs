using ClosedXML.Excel;
using CsvHelper;
using DocumentFormat.OpenXml.Bibliography;
using DocumentFormat.OpenXml.ExtendedProperties;
using ExcelDataReader;
using ICSharpCode.AvalonEdit.Document;
using ImageScraper.Extensions;
using ImageScraper.Helpers;
using ImageScraper.Models;
using ImageScraper.Mvvm;
using ImageScraper.Services;
using OpenAI_API;
using OpenAI_API.Chat;
using OpenAI_API.Models;
using Prism.Commands;
using Prism.Regions;
using Prism.Services.Dialogs;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace ImageScraper.ViewModels
{
    public class OpenAIViewModel : ViewModelBase, INavigationAware
    {
        private IRegionManager _regionManager;
        private readonly SettingViewModel _settingViewModel;
        private readonly UserSettings _userSettings;
        private readonly IDialogService _dialogService;
        private readonly QuoteFiltersViewModel _quoteFiltersViewModel;
        private int _numberOfOpenAIThreads;

        public int NumberOfOpenAIThreads
        {
            get
            {
                if (_numberOfOpenAIThreads <= 1)
                {
                    _numberOfOpenAIThreads = 1;
                }
                return _numberOfOpenAIThreads;
            }
            set
            {
                SetProperty(ref _numberOfOpenAIThreads, value);
                _userSettings.NumberOfOpenAIThreads = _numberOfOpenAIThreads;
            }
        }

        private bool _isLoginProgressActive = false;

        public bool IsLoginProgressActive
        {
            get { return _isLoginProgressActive; }
            set
            {
                SetProperty(ref _isLoginProgressActive, value);
            }
        }
        private Quote _selectedQuote;
        public Quote SelectedQuote
        {
            get => _selectedQuote;
            set
            {
                SetProperty(ref _selectedQuote, value);
            }
        }
        private int _numberOfQuotes;

        public int NumberOfQuotes
        {
            get 
            {
                if (_numberOfQuotes <= 1)
                {
                    _numberOfQuotes = 1;
                }
                return _numberOfQuotes; 
            }
            set 
            {
                SetProperty(ref _numberOfQuotes, value);
                _userSettings.NumberOfQuotes = _numberOfQuotes;
            }
        }
        private bool _isAutoGeneratedContentIntro;

        public bool IsAutoGeneratedContentIntro
        {
            get
            {
                return _isAutoGeneratedContentIntro;
            }
            set
            {
                SetProperty(ref _isAutoGeneratedContentIntro, value);
                _userSettings.IsAutoGeneratedContentIntro = _isAutoGeneratedContentIntro;

            }
        }
        private bool _isAutoGeneratedContentEnd;

        public bool IsAutoGeneratedContentEnd
        {
            get
            {
                return _isAutoGeneratedContentEnd;
            }
            set
            {
                SetProperty(ref _isAutoGeneratedContentEnd, value);
                _userSettings.IsAutoGeneratedContentEnd = _isAutoGeneratedContentEnd;

            }
        }

        public DelegateCommand<string> GoBackCommand { get; set; }
        public DelegateCommand CreateQuotesCommand { get; set; }
        public DelegateCommand StopCreateQuotesCommand { get; set; }
        public DelegateCommand ExportExcelCommand { get; set; }
        public DelegateCommand ExportToKeywordsInput { get; set; }
        public DelegateCommand AddQuoteFiltersCommand { get; set; }
        public DelegateCommand ImportFromExcelCommand { get; set; }
        public DelegateCommand<object> DeleteCommand { get; set; }
        public DelegateCommand DeleteAllCommand { get; set; }

        public TextDocument Topics { get; set; }
        public TextDocument Prompt { get; set; }
        public TextDocument ContentIntroPrompt { get; set; }
        public TextDocument ContentEndPrompt { get; set; }
        public TextDocument Instruction { get; set; }
        public TextDocument ContentInstrution { get; set; }
        public QuotesCollection Quotes { get; set; }

        private OpenAIAPI api;
        private CancellationTokenSource cancellationTokenSource;

        public OpenAIViewModel(IRegionManager regionManager, SettingViewModel settingViewModel, UserSettings userSettings, IDialogService dialogService,QuoteFiltersViewModel quoteFiltersViewModel)
        {
            _regionManager = regionManager;
            _settingViewModel = settingViewModel;
            _userSettings = userSettings;
            _dialogService = dialogService;
            _quoteFiltersViewModel = quoteFiltersViewModel;
            Topics = new TextDocument();
            Prompt = new TextDocument();
            ContentIntroPrompt = new TextDocument();
            ContentEndPrompt = new TextDocument();
            Instruction = new TextDocument();
            ContentInstrution = new TextDocument();
            Quotes = new QuotesCollection();
            Quotes.CollectionChangedCustom += Quotes_CollectionChangedCustom;
            GoBackCommand = new DelegateCommand<string>(GoBack);
            CreateQuotesCommand = new DelegateCommand(CreateQuotes);
            StopCreateQuotesCommand = new DelegateCommand(StopCreateQuotes);
            AddQuoteFiltersCommand = new DelegateCommand(AddQuoteFilters);
            ExportExcelCommand = new DelegateCommand(ExportToExcel);
            ImportFromExcelCommand = new DelegateCommand(ImportFromExcel);
            DeleteCommand = new DelegateCommand<object>(DeleteSelectedQuote);
            DeleteAllCommand = new DelegateCommand(DeleteAllQuotes);

            api = new OpenAIAPI(_settingViewModel.OpenAIApiKey); // shorthand
            LoadSettings();
            LoadTopics();
            LoadPrompt();
            LoadContentIntroPrompt();
            LoadContentEndPrompt();
            LoadInstruction();
            LoadContentInstruction();
            LoadQuotesFromCsv();
        }
        private void Quotes_CollectionChangedCustom(object sender, NotifyCollectionChangedEventArgs e)
        {
            SaveQuotesToCsv(); ;
        }
        private void SaveQuotesToCsv()
        {
            FolderAndFileHelper.CreateFile(FilePaths.quotesCsv);
            using (var writer = new StreamWriter(FilePaths.quotesCsv))
            using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
            {
                csv.WriteRecords(Quotes);
            }
        }
        private List<Quote> ReadQuotesFromCsv()
        {
            using (var reader = new StreamReader(FilePaths.quotesCsv))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                return csv.GetRecords<Quote>().ToList();
            }
        }
        private void LoadQuotesFromCsv()
        {
            var quotes = ReadQuotesFromCsv();
            Quotes.Clear();
            foreach (var quote in quotes)
            {
                Quotes.Add(quote);
            }
        }
        private void DeleteAllQuotes()
        {
            if (Quotes != null)
            {
                Quotes.Clear();
            }
        }
        private void DeleteSelectedQuote(object selectedQuote)
        {
            if (Quotes != null)
            {
                if (selectedQuote != null)
                {
                    Quotes.Remove((Quote)selectedQuote);
                }
            }
        }
        private void ImportFromExcel()
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Excel files (*.xlsx)|*.xlsx",
                DefaultExt = ".xlsx"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                ImportQuotesFromExcel(openFileDialog.FileName);
            }
        }
        private void ImportQuotesFromExcel(string fileName)
        {
            ObservableCollection<Quote> importedQuotes = new ObservableCollection<Quote>();

            try
            {
                using (var stream = File.Open(fileName, FileMode.Open, FileAccess.Read))
                {
                    using (var reader = ExcelReaderFactory.CreateReader(stream))
                    {
                        var result = reader.AsDataSet(new ExcelDataSetConfiguration
                        {
                            ConfigureDataTable = _ => new ExcelDataTableConfiguration
                            {
                                UseHeaderRow = true
                            }
                        });

                        foreach (DataTable dt in result.Tables)
                        {
                            string topic = dt.TableName;

                            foreach (DataRow row in dt.Rows)
                            {
                                Quote quote = new Quote
                                {
                                    Content = row["Content"].ToString(),
                                    Author = row["Author"].ToString(),
                                    Topic = topic
                                };

                                bool quoteExistsInFilters = false;
                                foreach (Quote filter in _quoteFiltersViewModel.ExcludeQuotes)
                                {
                                    // kiểm tra xem có tồn tại giá trị của thuộc tính trong cột của filter không
                                    if (!string.IsNullOrEmpty(filter.Content) && quote.Content.Contains(filter.Content))
                                    {
                                        quoteExistsInFilters = true;
                                        break;
                                    }
                                    if (!string.IsNullOrEmpty(filter.Author) && quote.Author.Contains(filter.Author))
                                    {
                                        quoteExistsInFilters = true;
                                        break;
                                    }

                                }

                                if (!quoteExistsInFilters)
                                {
                                    var quoteEqualityComparer = new QuoteEqualityComparer();
                                    if (!Quotes.Contains(quote, quoteEqualityComparer))
                                    {
                                        importedQuotes.Add(quote);
                                    }
                                }
                            }
                        }


                    }
                }
               
                Quotes.AddRange(importedQuotes);
                MessageBoxService.ShowInformation("Data imported successfully!");
            }
            catch (Exception e)
            {
                MessageBoxService.ShowError(e.Message);
            }
           
        }
        private void ExportToExcel()
        {
            var saveFileDialog = new Microsoft.Win32.SaveFileDialog
            {
                Filter = "Excel files (*.xlsx)|*.xlsx",
                DefaultExt = ".xlsx",
                FileName = "ExportedData"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                ExportQuotesToExcel(Quotes, saveFileDialog.FileName);
                MessageBox.Show("Data exported successfully!", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }
        private void ExportQuotesToExcel(ObservableCollection<Quote> quotes, string fileName)
        {
            try
            {
                using (var workbook = new XLWorkbook())
                {
                    // Group quotes by topic
                    var groupedQuotes = quotes.GroupBy(q => q.Topic);

                    foreach (var group in groupedQuotes)
                    {
                        string topic = group.Key;
                        var worksheet = workbook.Worksheets.Add(topic);

                        // Add columns headers
                        worksheet.Cell(1, 1).Value = "Content";
                        worksheet.Cell(1, 2).Value = "Author";

                        // Add rows
                        int rowIndex = 2;
                        foreach (var quote in group)
                        {
                            worksheet.Cell(rowIndex, 1).Value = quote.Content;
                            worksheet.Cell(rowIndex, 2).Value = quote.Author;
                            rowIndex++;
                        }

                        // Auto-fit columns
                        worksheet.Columns().AdjustToContents();
                    }

                    // Save the workbook
                    workbook.SaveAs(fileName);
                }
            }
            catch (Exception e)
            {
                MessageBoxService.ShowError(e.Message);
            }
           
        }
        private void AddQuoteFilters()
        {
            _dialogService.ShowDialog("QuoteFilters");
        }
        private void StopCreateQuotes()
        {
            if (cancellationTokenSource != null)
            {
                cancellationTokenSource.Cancel();
            }
        }

        private bool CanCreateQuotes()
        {
            if (IsLoginProgressActive)
            {
                MessageBoxService.ShowError("Chương trình đang chạy");
                return false;
            }
            if (_settingViewModel.OpenAIApiKey.Trim() == "" || _settingViewModel.OpenAIApiKey == null)
            {
                MessageBoxService.ShowError("Chưa nhập OpenAI API");
                return false;
            }
            return true;
        }
        private async void CreateQuotes()
        {
            if (CanCreateQuotes())
            {
                try
                {
                    api = new OpenAIAPI(_settingViewModel.OpenAIApiKey); // shorthand
                    IsLoginProgressActive = true;
                    cancellationTokenSource = new CancellationTokenSource();
                    var topicLines = Topics.Text.GetLines();
                    var tasks = new List<Task>();
                    var semaphore = new SemaphoreSlim(NumberOfOpenAIThreads);
                    string instruction = Instruction.Text.Replace("[count]", NumberOfQuotes.ToString());
                    string promptBase = Prompt.Text.Replace("[count]", NumberOfQuotes.ToString());
                    foreach (var topic in topicLines)
                    {
                        tasks.Add(ProcessTopic(topic, instruction, promptBase, semaphore, cancellationTokenSource.Token));
                    }
                    await Task.WhenAll(tasks);


                }
                catch (OperationCanceledException)
                {
                }
                catch (Exception ex)
                {
                }
                finally
                {
                    IsLoginProgressActive = false;
                }
            } 
           
        }
        string AddPeriodIfMissing(string input)
        {
            if (string.IsNullOrWhiteSpace(input))
            {
                return input;
            }

            char lastChar = input[input.Length - 1];
            if (lastChar != '.')
            {
                return input + ".";
            }

            return input;
        }
        
        private async Task ProcessTopic(string topic, string instruction, string promptBase, SemaphoreSlim semaphore, CancellationToken cancellationToken)
        {
            CancellationTokenSource quoteLimitCancel = new CancellationTokenSource();
            CancellationToken quouteLimitCancellation = new CancellationToken();
            await semaphore.WaitAsync(cancellationToken);
            try
            {
                int quoteCount = 0;
                bool conditionMet = false;
                while (quoteCount < NumberOfQuotes)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    var chat = api.Chat.CreateConversation();
                    chat.AppendSystemMessage(instruction);
                    chat.AppendUserInput(promptBase.Replace("[topic]", topic));
                    string sentences = "";
                    var tcs = new TaskCompletionSource<bool>(TaskCreationOptions.RunContinuationsAsynchronously);
                    using (cancellationToken.Register(() => tcs.TrySetCanceled()))
                    {
                        await Task.WhenAny(
                            chat.StreamResponseFromChatbotAsync(res =>
                            {
                                cancellationToken.ThrowIfCancellationRequested();
                                quouteLimitCancellation.ThrowIfCancellationRequested();
                                if (conditionMet) 
                                {
                                    quoteLimitCancel.Cancel();
                                    return;
                                }
                                sentences += res;
                                if (sentences.Contains("\n"))
                                {
                                    var regex = new Regex(@"^\d+\.");
                                    sentences = regex.Replace(sentences, "").Trim();
                                    bool quoteExistsInFilters = false;

                                    if (sentences.Contains("-") || sentences.Contains("–"))
                                    {
                                        var parts = sentences.Split(new[] { '-' }, 2);
                                        if (sentences.Contains("–"))
                                        {
                                            parts = sentences.Split(new[] { '–' }, 2);
                                        }
                                        string content = parts[0].Trim();
                                        content = content.Replace("\"", "");
                                        content = AddPeriodIfMissing(content);
                                        string author = parts[1].Trim();
                                        author = author.Replace("\"", "");
                                        author = author.Replace("(", "");
                                        author = author.Replace(")", "");
                                        author = author.Replace(".", "");

                                        foreach (Quote filter in _quoteFiltersViewModel.ExcludeQuotes)
                                        {
                                            if (!string.IsNullOrEmpty(filter.Content) && content.Contains(filter.Content))
                                            {
                                                quoteExistsInFilters = true;
                                                break;
                                            }
                                            if (!string.IsNullOrEmpty(filter.Author) && author.Contains(filter.Author))
                                            {
                                                quoteExistsInFilters = true;
                                                break;
                                            }
                                        }

                                        var quote = new Quote() { Content = content, Author = author, Topic = topic };
                                        if (!quoteExistsInFilters)
                                        {
                                            var quoteEqualityComparer = new QuoteEqualityComparer();
                                            if (!Quotes.Contains(quote, quoteEqualityComparer))
                                            {
                                                Quotes.Add(quote);
                                                quoteCount++;
                                                if (quoteCount >= NumberOfQuotes) // Check if condition is met
                                                {
                                                    conditionMet = true;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        string content = sentences;
                                        content = content.Replace("\"", "");

                                        foreach (Quote filter in _quoteFiltersViewModel.ExcludeQuotes)
                                        {
                                            if (!string.IsNullOrEmpty(filter.Content) && content.Contains(filter.Content))
                                            {
                                                quoteExistsInFilters = true;
                                                break;
                                            }
                                        }
                                        var quote = new Quote() { Content = content, Topic = topic };
                                        if (!quoteExistsInFilters)
                                        {
                                            var quoteEqualityComparer = new QuoteEqualityComparer();
                                            if (!Quotes.Contains(quote, quoteEqualityComparer))
                                            {
                                                Quotes.Add(quote);
                                                quoteCount++;
                                                if (quoteCount >= NumberOfQuotes) // Check if condition is met
                                                {
                                                    conditionMet = true;
                                                }
                                            }
                                        }
                                    }
                                    sentences = "";
                                }
                            }),
                            tcs.Task
                        );

                    }
                }
            }
            catch
            {
                if (cancellationToken.IsCancellationRequested)
                {
                    throw new OperationCanceledException();
                }
            }
            finally
            {
                semaphore.Release();
            }

        }
        
        public async Task<string> ProcessContent(string count, string topic , CancellationToken cancellationToken,bool isIntro = true)
        {
            var chat = api.Chat.CreateConversation(new OpenAI_API.Chat.ChatRequest()
            {
                Model = Model.ChatGPTTurbo,
                Temperature = 0.9,
                MaxTokens = 2000,
            });
            string instrution = "";
            string contentIntroPrompt = "";
            string contentEndPrompt = "";
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                instrution = ContentInstrution.Text;
                contentIntroPrompt = ContentIntroPrompt.Text;
                contentEndPrompt = ContentEndPrompt.Text;
            });
            instrution = instrution.Replace("[count]", count);
            instrution = instrution.Replace("[count]", count);
            contentIntroPrompt = contentIntroPrompt.Replace("[count]",count);
            contentIntroPrompt = contentIntroPrompt.Replace("[topic]", topic);
            contentEndPrompt = contentEndPrompt.Replace("[count]", count);
            contentEndPrompt = contentEndPrompt.Replace("[topic]", topic);
            chat.AppendSystemMessage(instrution);
            if (isIntro)
            {
                chat.AppendUserInput(contentIntroPrompt);
            }
            else
            {
                chat.AppendUserInput(contentEndPrompt);
            }
            Stopwatch sw = Stopwatch.StartNew();    
            var content = await chat.GetResponseFromChatbotAsync();
            sw.Stop();
            return content;
        }
        private void GoBack(string navigatePath)
        {
            if (navigatePath != null)
                _regionManager.RequestNavigate("ContentRegion", navigatePath);
        }
        private void LoadSettings()
        {
            NumberOfOpenAIThreads = _userSettings.NumberOfOpenAIThreads;
            NumberOfQuotes = _userSettings.NumberOfQuotes;
            IsAutoGeneratedContentIntro = _userSettings.IsAutoGeneratedContentIntro;
            IsAutoGeneratedContentEnd = _userSettings.IsAutoGeneratedContentEnd;
        }
        private void LoadTopics()
        {
            var topics = File.ReadAllText(FilePaths.topics);
            Topics.Text = topics;
        }
        private void LoadPrompt()
        {
            var prompt = File.ReadAllText(FilePaths.prompt);
            Prompt.Text = prompt;
        }
        private void LoadContentIntroPrompt()
        {
            var prompt = File.ReadAllText(FilePaths.introContentPrompt);
            ContentIntroPrompt.Text = prompt;
        }
        private void LoadContentEndPrompt()
        {
            var prompt = File.ReadAllText(FilePaths.endContentPrompt);

            ContentEndPrompt.Text = prompt;
        }
        private void LoadInstruction()
        {
            var instruction = File.ReadAllText(FilePaths.instruction);
            Instruction.Text = instruction;
        }
        private void LoadContentInstruction()
        {
            var instruction = File.ReadAllText(FilePaths.contentInstrution);
            ContentInstrution.Text = instruction;
        }
        public void SaveTopics()
        {
            File.WriteAllText(FilePaths.topics, Topics.Text);
        }
        public void SavePrompt()
        {
            File.WriteAllText(FilePaths.prompt, Prompt.Text);
        }
        public void SaveContentIntroPrompt()
        {
            File.WriteAllText(FilePaths.introContentPrompt, ContentIntroPrompt.Text);
        }
        public void SaveContentEndPrompt()
        {
            File.WriteAllText(FilePaths.endContentPrompt, ContentEndPrompt.Text);
        }
        public void SaveInstruction()
        {
            File.WriteAllText(FilePaths.instruction, Instruction.Text);
        }
        public void SaveContentInstruction()
        {
            File.WriteAllText(FilePaths.contentInstrution, ContentInstrution.Text);
        }
        public void OnNavigatedTo(NavigationContext navigationContext)
        {
            LoadSettings();
          
        }
        public bool IsNavigationTarget(NavigationContext navigationContext)
        {
            return true;
        }
        public void OnNavigatedFrom(NavigationContext navigationContext)
        {
            SaveTopics();
            SaveInstruction();
            SavePrompt();
            SaveContentIntroPrompt();
            SaveContentEndPrompt();
        }
    }
    public class QuotesCollection : ObservableCollection<Quote>
    {
        public event EventHandler<NotifyCollectionChangedEventArgs> CollectionChangedCustom;

        protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
        {
            base.OnCollectionChanged(e);

            // Gọi sự kiện tùy chỉnh khi Quotes thay đổi
            CollectionChangedCustom?.Invoke(this, e);
        }
    }
    public class QuoteEqualityComparer : IEqualityComparer<Quote>
    {
        public bool Equals(Quote x, Quote y)
        {
            if (x == null || y == null)
                return false;
            return x.Content == y.Content && x.Author == y.Author && x.Topic == y.Topic;
        }

        public int GetHashCode(Quote obj)
        {
            return (obj.Content + obj.Author + obj.Topic).GetHashCode();
        }
    }
}